--- To find the number of nulls in given data set

SELECT 
    COUNT(*) AS TotalRows,
    SUM(CASE WHEN TransactionID IS NULL THEN 1 ELSE 0 END) AS Missing_TransactionID,
    SUM(CASE WHEN CustomerID IS NULL THEN 1 ELSE 0 END) AS Missing_CustomerID,
    SUM(CASE WHEN TransactionDate IS NULL THEN 1 ELSE 0 END) AS Missing_TransactionDate,
    SUM(CASE WHEN TransactionAmount IS NULL THEN 1 ELSE 0 END) AS Missing_TransactionAmount,
    SUM(CASE WHEN PaymentMethod IS NULL THEN 1 ELSE 0 END) AS Missing_PaymentMethod,
    SUM(CASE WHEN Quantity IS NULL THEN 1 ELSE 0 END) AS Missing_Quantity,
    SUM(CASE WHEN DiscountPercent IS NULL THEN 1 ELSE 0 END) AS Missing_DiscountPercent,
    SUM(CASE WHEN City IS NULL THEN 1 ELSE 0 END) AS Missing_City,
    SUM(CASE WHEN StoreType IS NULL THEN 1 ELSE 0 END) AS Missing_StoreType,
    SUM(CASE WHEN CustomerAge IS NULL THEN 1 ELSE 0 END) AS Missing_CustomerAge,
    SUM(CASE WHEN CustomerGender IS NULL THEN 1 ELSE 0 END) AS Missing_CustomerGender,
    SUM(CASE WHEN LoyaltyPoints IS NULL THEN 1 ELSE 0 END) AS Missing_LoyaltyPoints,
    SUM(CASE WHEN ProductName IS NULL THEN 1 ELSE 0 END) AS Missing_ProductName,
    SUM(CASE WHEN Region IS NULL THEN 1 ELSE 0 END) AS Missing_Region,
    SUM(CASE WHEN Returned IS NULL THEN 1 ELSE 0 END) AS Missing_Returned,
    SUM(CASE WHEN FeedbackScore IS NULL THEN 1 ELSE 0 END) AS Missing_FeedbackScore,
    SUM(CASE WHEN ShippingCost IS NULL THEN 1 ELSE 0 END) AS Missing_ShippingCost,
    SUM(CASE WHEN DeliveryTimeDays IS NULL THEN 1 ELSE 0 END) AS Missing_DeliveryTimeDays,
    SUM(CASE WHEN IsPromotional IS NULL THEN 1 ELSE 0 END) AS Missing_IsPromotional
FROM Assesment_sales;

--------------------------------------------------------------------------------------------------
---transactin date update using forwardfill with transactionId

WITH FilledDates AS (
    SELECT 
        TransactionID,
        TransactionDate,
        LAG(TransactionDate) OVER (ORDER BY TransactionID) AS PrevTransactionDate
    FROM Assesment_sales
)
UPDATE Assesment_sales
SET TransactionDate = FilledDates.PrevTransactionDate
FROM FilledDates
WHERE Assesment_sales.TransactionID = FilledDates.TransactionID
  AND Assesment_sales.TransactionDate IS NULL;
-----------------------------------------------------------------------------------------------
----Impute missing PaymentMethod with the mode (most frequent value).

  DECLARE @ModePaymentMethod VARCHAR(50);

-- Calculate the mode for PaymentMethod
SELECT TOP 1 @ModePaymentMethod = PaymentMethod
FROM Assesment_sales
WHERE PaymentMethod IS NOT NULL
GROUP BY PaymentMethod
ORDER BY COUNT(*) DESC;

-- Impute missing PaymentMethod with the mode
UPDATE Assesment_sales
SET PaymentMethod = @ModePaymentMethod
WHERE PaymentMethod IS NULL;

select PaymentMethod from assesment_sales
where PaymentMethod is null


-----------------------------------------------------------------------------
----Use forward fill to impute missing ProductName values based on the previous available value.
WITH FilledProducts AS (
    SELECT 
        TransactionID,
        ProductName,
        LAG(ProductName) OVER (ORDER BY TransactionDate) AS PrevProductName
    FROM Assesment_sales
)
UPDATE Assesment_sales
SET ProductName = FilledProducts.PrevProductName
FROM FilledProducts
WHERE Assesment_sales.TransactionID = FilledProducts.TransactionID
  AND Assesment_sales.ProductName IS NULL;
